// Reversi
//
// server script

// initialize server:
var server = require('http').createServer();
var io = require('socket.io')(server);
var users = []; // array containing all currently connected players

server.listen(3000);

// a new player connects to the server:
io.on('connection', function(socket){
	var user = addUser(socket);

	// the player left the game:
	socket.on('disconnect', function () {
		// tell his opponene, that the player left and the game ended
		if (user.opponent != null) {
			io.to(user.opponent).emit("quit", user);
		}
		// remove user from array of all users
		removeUser(user);
	});

	// the player played a move
	socket.on("playsend", function (data) {
		// send the move to his opponent
		io.to(data.to).emit("playget", data);
	});

	// the player sent metadata (name, image, ...)
	socket.on("usersend", function (data) {
		// send metadata to his opponent
		io.to(data.to).emit("userget", data);
	});


});

// add a new user to the array of all users
var addUser = function(socket) {
	// create a new user
	var user = {
		id: socket.id, // the id of the new user (generated by socket.io)
		role: null,    // the role of the new player (player 1 or player 2)
		opponent: null // the id of his opponent
	}
	// add new user to array of all users
	users.push(user);
	// try to start a game 
	startgame(user);
	return user;
}

// remove a user from the array of all users
var removeUser = function(user) {
	for(var i=0; i<users.length; i++) {
		if(user.id === users[i].id) {
			users.splice(i, 1);
			return;
		}
	}
}

// start a game if two players can be connected or tell the new player to wait for opponent
var startgame = function(user) {
	for(var i=0; i<users.length; i++) {
		if (i == users.length-1) {
			// no opponent available - tell the player he is connected and waiting for an opponent
			io.to(users[i].id).emit("connect", users[i]);
		} else {
			// opponent available
			if (users[i].opponent == null) {
				// set opponent-id for waiting player
				users[i].opponent = users[users.length-1].id;
				// set role of waiting player to player 1
				users[i].role = "0";
				// tell waiting player, the game has starded
				io.to(users[i].id).emit("startgame", users[i]);
				// set opponent-id for new player
				users[users.length-1].opponent = users[i].id;
				// set role of new player to player 2
				users[users.length-1].role = "1";
				// tell new player, the game has started
				io.to(users[users.length-1].id).emit("startgame", users[users.length-1]);
				break;
			}
		}
	}
}